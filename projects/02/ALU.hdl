// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   // Select whether to set x and y to zero.

   Mux16 (a=x, b=false, sel=zx, out=x1);
   Mux16 (a=y, b=false, sel=zy, out=y1);

   // Negate both x and y for later use

   Not16 (in=x1, out=notx1);
   Not16 (in=y1, out=noty1);

   // Select whether to bitwise not x and y

   Mux16 (a=x1, b=notx1, sel=nx, out=x2);
   Mux16 (a=y1, b=noty1, sel=ny, out=y2);

   // Find ADD16 and AND16 for later use

   Add16 (a=x2, b=y2, out=xplusy);
   And16 (a=x2, b=y2, out=xandy);

   // Select whether to compute ADD16 or AND16

   Mux16 (a=xandy, b=xplusy, sel=f, out=out1);

   // Negate the output out1 for later use

   Not16 (in=out1, out=notout1);

   // Select whether to negate the output
   // if out<0, MSB will be 1, so can set that here

   Mux16 (a=out1, b=notout1, sel=no, out[15]=ng, out[0..7]=part1, out[8..15]=part2, out=out);

   // if all of out = 0, then Or8Way (out[0..7]) or Or8Way (out[8..15]) is false ... 

   Or8Way (in=part1, out=or1);
   Or8Way (in=part2, out=or2);

   Or (a=or1, b=or2, out=nonzero);

   Not(in=nonzero, out=zr);
}